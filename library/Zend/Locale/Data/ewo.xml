<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE ldml SYSTEM "../../common/dtd/ldml.dtd">
<!-- Copyright © 1991-2013 Unicode, Inc.
CLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)
For terms of use, see http://www.unicode.org/copyright.html
-->
<ldml>
	<identity>
		<version number="$Revision: 9287 $"/>
		<generation date="$Date: 2013-08-28 21:32:04 -0500 (Wed, 28 Aug 2013) $"/>
		<language type="ewo"/>
	</identity>
	<localeDisplayNames>
		<languages>
			<language type="ak">Ǹkɔ́bɔ akán</language>
			<language type="am">Ǹkɔ́bɔ amária</language>
			<language type="ar">Ǹkɔ́bɔ arábia</language>
			<language type="be">Ǹkɔ́bɔ belarúsian</language>
			<language type="bg">Ǹkɔ́bɔ buləgárian</language>
			<language type="bn">Ǹkɔ́bɔ bɛngalí</language>
			<language type="cs">Ǹkɔ́bɔ tsɛ́g</language>
			<language type="de">Ǹkɔ́bɔ ndzáman</language>
			<language type="el">Ǹkɔ́bɔ gəlɛ́g</language>
			<language type="en">Ǹkɔ́bɔ éngəlís</language>
			<language type="es">ǹkɔ́bɔ kpənyá</language>
			<language type="ewo">ewondo</language>
			<language type="fa">ǹkɔ́bɔ fɛ́rəsian</language>
			<language type="fr">Ǹkɔ́bɔ fulɛnsí</language>
			<language type="ha">Ǹkɔ́bɔ aúsá</language>
			<language type="hi">Ǹkɔ́bɔ hindí</language>
			<language type="hu">Ǹkɔ́bɔ ungárían</language>
			<language type="id">Ǹkɔ́bɔ ɛndonésian</language>
			<language type="ig">Ǹkɔ́bɔ ibó</language>
			<language type="it">Ǹkɔ́bɔ etáliɛn</language>
			<language type="ja">Ǹkɔ́bɔ hapɔ́n</language>
			<language type="jv">Ǹkɔ́bɔ havanís</language>
			<language type="km">Ǹkɔ́bɔ kəmɛ́r</language>
			<language type="ko">Ǹkɔ́bɔ koréan</language>
			<language type="ms">Ǹkɔ́bɔ malɛ́sian</language>
			<language type="my">Ǹkɔ́bɔ birəmán</language>
			<language type="ne">ǹkɔ́bɔ nefálian</language>
			<language type="nl">Ǹkɔ́bɔ nɛrəlándía</language>
			<language type="pa">ǹkɔ́bɔ funəhábia</language>
			<language type="pl">ǹkɔ́bɔ fólis</language>
			<language type="pt">ǹkɔ́bɔ fɔtugɛ́s</language>
			<language type="ro">ńkɔ́bɔ románía</language>
			<language type="ru">ǹkɔ́bɔ rúsian</language>
			<language type="rw">ǹkɔ́bɔ ruwandá</language>
			<language type="so">ǹkɔ́bɔ somália</language>
			<language type="sv">ǹkɔ́bɔ suwɛ́d</language>
			<language type="ta">ǹkɔ́bɔ tamíl</language>
			<language type="th">ǹkɔ́bɔ táilan</language>
			<language type="tr">ǹkɔ́bɔ túrəki</language>
			<language type="uk">ǹkɔ́bɔ ukelénia</language>
			<language type="ur">ǹkɔ́bɔ urudú</language>
			<language type="vi">ǹkɔ́bɔ hiɛdənám</language>
			<language type="yo">ǹkɔ́bɔ yorúba</language>
			<language type="zh">Ǹkɔ́bɔ tsainís</language>
			<language type="zu">ǹkɔ́bɔ zulú</language>
		</languages>
		<territories>
			<territory type="AD">Andór</territory>
			<territory type="AE">Bemirá yá Arábə uní</territory>
			<territory type="AF">Afəganisətán</territory>
			<territory type="AG">Antígwa ai Barəbúda</territory>
			<territory type="AI">Angíyə</territory>
			<territory type="AL">Aləbánia</territory>
			<territory type="AM">Arəménia</territory>
			<territory type="AN">Anətíyə Nɛdəlánia</territory>
			<territory type="AO">Angolá</territory>
			<territory type="AR">Arəhenətína</territory>
			<territory type="AS">Bəsamóa yá Amə́rəka</territory>
			<territory type="AT">Osətəlía</territory>
			<territory type="AU">Osətəlalí</territory>
			<territory type="AW">Arúba</territory>
			<territory type="AZ">Azɛrəbaidzáŋ</territory>
			<territory type="BA">Bosəní ai ɛrəzegovín</territory>
			<territory type="BB">Barəbád</territory>
			<territory type="BD">Bangaladɛ́s</territory>
			<territory type="BE">Bɛləhíg</territory>
			<territory type="BF">Buləkiná Fasó</territory>
			<territory type="BG">Buləgarí</territory>
			<territory type="BH">Bahərɛ́n</territory>
			<territory type="BI">Burundí</territory>
			<territory type="BJ">Bəníŋ</territory>
			<territory type="BM">Bɛrəmúd</territory>
			<territory type="BN">Buluné</territory>
			<territory type="BO">Bolívia</territory>
			<territory type="BR">Bəlazíl</territory>
			<territory type="BS">Bahámas</territory>
			<territory type="BT">Butáŋ</territory>
			<territory type="BW">Botswaná</territory>
			<territory type="BY">Bəlarús</territory>
			<territory type="BZ">Bəlís</territory>
			<territory type="CA">kanadá</territory>
			<territory type="CD">ǹnam Kongó Demokəlatíg</territory>
			<territory type="CF">ǹnam Zǎŋ Afiriká</territory>
			<territory type="CG">Kongó</territory>
			<territory type="CH">Suís</territory>
			<territory type="CI">Kód Divɔ́r</territory>
			<territory type="CK">Minlán Mí kúg</territory>
			<territory type="CL">Tsilí</territory>
			<territory type="CM">Kamərún</territory>
			<territory type="CN">Tsáina</territory>
			<territory type="CO">Kolɔmbí</territory>
			<territory type="CR">Kosta Ríka</territory>
			<territory type="CU">Kubá</territory>
			<territory type="CV">Minlán Mí Káb Vɛr</territory>
			<territory type="CY">Sipəlús</territory>
			<territory type="CZ">Ǹnam Tsɛ́g</territory>
			<territory type="DE">Ndzáman</territory>
			<territory type="DJ">Dzibutí</territory>
			<territory type="DK">Danəmárəg</territory>
			<territory type="DM">Dómənika</territory>
			<territory type="DO">République dominicaine</territory>
			<territory type="DZ">Aləyéria</territory>
			<territory type="EC">Ekwatór</territory>
			<territory type="EE">Esetoní</territory>
			<territory type="EG">Ehíbətɛn</territory>
			<territory type="ER">Elitəlé</territory>
			<territory type="ES">Kpənyá</territory>
			<territory type="ET">Etiopí</territory>
			<territory type="FI">Finəlán</territory>
			<territory type="FJ">Fidzí</territory>
			<territory type="FK">Minlán Mi Fóləkəlan</territory>
			<territory type="FM">Mikoronésia</territory>
			<territory type="FR">Fulɛnsí</territory>
			<territory type="GA">Gabóŋ</territory>
			<territory type="GB">Ǹnam Engəlis</territory>
			<territory type="GD">Gələnádə</territory>
			<territory type="GE">Horə́yia</territory>
			<territory type="GF">Guyán yá Fulɛnsí</territory>
			<territory type="GH">Ganá</territory>
			<territory type="GI">Yiləbalatár</territory>
			<territory type="GL">Goelán</territory>
			<territory type="GM">Gambí</territory>
			<territory type="GN">Giné</territory>
			<territory type="GP">Guadəlúb</territory>
			<territory type="GQ">Giné Ekwató</territory>
			<territory type="GR">Gəlɛ́s</territory>
			<territory type="GT">Guatemalá</territory>
			<territory type="GU">Guám</territory>
			<territory type="GW">Giné Bisaó</territory>
			<territory type="GY">Guyán</territory>
			<territory type="HN">Ondurás</territory>
			<territory type="HR">Kəlowásia</territory>
			<territory type="HT">Aití</territory>
			<territory type="HU">Ongirí</territory>
			<territory type="ID">ɛndonésia</territory>
			<territory type="IE">Irəlándə</territory>
			<territory type="IL">Isəraɛ́l</territory>
			<territory type="IN">ɛ́ndə</territory>
			<territory type="IO">ǹnam ɛngəlís yá Máŋ mə́ ɛ́ndə</territory>
			<territory type="IQ">Irág</territory>
			<territory type="IR">Irán</territory>
			<territory type="IS">Isəlándə</territory>
			<territory type="IT">Itáliɛn</territory>
			<territory type="JM">Hamaíka</territory>
			<territory type="JO">Horədaní</territory>
			<territory type="JP">Hapɔ́n</territory>
			<territory type="KE">Keniá</territory>
			<territory type="KG">Kirigisətán</territory>
			<territory type="KH">kambodía</territory>
			<territory type="KI">Kiribatí</territory>
			<territory type="KM">Komɔ́r</territory>
			<territory type="KN">Ǹfúfúb-Kilisətóv-ai-Nevis</territory>
			<territory type="KP">Koré yá Nór</territory>
			<territory type="KR">Koré yá Súd</territory>
			<territory type="KW">Kowɛ́d</territory>
			<territory typ                  Default is -1 which returns without rounding
     * @param string|Zend_Locale $locale (Optional) Locale for number representation
     * @return integer|string
     */
    public function getValue($round = -1, $locale = null)
    {
        if ($round < 0) {
            $return = $this->_value;
        } else {
            $return = Zend_Locale_Math::round($this->_value, $round);
        }

        if ($locale !== null) {
            $this->setLocale($locale, true);
            return Zend_Locale_Format::toNumber($return, array('locale' => $locale));
        }

        return $return;
    }

    /**
     * Set a new value
     *
     * @param  integer|string      $value   Value as string, integer, real or float
     * @param  string              $type    OPTIONAL A measure type f.e. Zend_Measure_Length::METER
     * @param  string|Zend_Locale  $locale  OPTIONAL Locale for parsing numbers
     * @throws Zend_Measure_Exception
     * @return Zend_Measure_Abstract
     */
    public function setValue($value, $type = null, $locale = null)
    {
        if (($type !== null) and (Zend_Locale::isLocale($type, null, false))) {
            $locale = $type;
            $type = null;
        }

        if ($locale === null) {
            $locale = $this->_locale;
        }

        $this->setLocale($locale, true);
        if ($type === null) {
            $type = $this->_units['STANDARD'];
        }

        if (empty($this->_units[$type])) {
            require_once 'Zend/Measure/Exception.php';
            throw new Zend_Measure_Exception("Type ($type) is unknown");
        }

        try {
            $value = Zend_Locale_Format::getNumber($value, array('locale' => $locale));
        } catch(Exception $e) {
            require_once 'Zend/Measure/Exception.php';
            throw new Zend_Measure_Exception($e->getMessage(), $e->getCode(), $e);
        }

        $this->_value = $value;
        $this->setType($type);
        return $this;
    }

    /**
     * Returns the original type
     *
     * @return type
     */
    public function getType()
    {
        return $this->_type;
    }

    /**
     * Set a new type, and convert the value
     *
     * @param  string $type New type to set
     * @throws Zend_Measure_Exception
     * @return Zend_Measure_Abstract
     */
    public function setType($type)
    {
        if (empty($this->_units[$type])) {
            require_once 'Zend/Measure/Exception.php';
            throw new Zend_Measure_Exception("Type ($type) is unknown");
        }

        if (empty($this->_type)) {
            $this->_type = $type;
        } else {
            // Convert to standard value
            $value = $this->_value;
            if (is_array($this->_units[$this->getType()][0])) {
                foreach ($this->_units[$this->getType()][0] as $key => $found) {
                    switch ($key) {
                        case "/":
                            if ($found != 0) {
                                $value = call_user_func(Zend_Locale_Math::$div, $value, $found, 25);
                            }
                            break;
                        case "+":
                            $value = call_user_func(Zend_Locale_Math::$add, $value, $found, 25);
                            break;
                        case "-":
                            $value = call_user_func(Zend_Locale_Math::$sub, $value, $found, 25);
                            break;
                        default:
                            $value = call_user_func(Zend_Locale_Math::$mul, $value, $found, 25);
                            break;
                    }
                }
            } else {
                $value = call_user_func(Zend_Locale_Math::$mul, $value, $this->_units[$this->getType()][0], 25);
            }

            // Convert to expected value
            if (is_array($this->_units[$type][0])) {
                foreach (array_reverse($this->_units[$type][0]) as $key => $found) {
                    switch ($key) {
                        case "/":
                            $value = call_user_func(Zend_Locale_Math::$mul, $value, $found, 25);
                            break;
                        case "+":
                            $value = call_user_func(Zend_Locale_Math::$sub, $value, $found, 25);
                            break;
                        case "-":
                            $value = call_user_func(Zend_Locale_Math::$add, $value, $found, 25);
                            break;
                        default:
                            if ($found != 0) {
                                $value = call_user_func(Zend_Locale_Math::$div, $value, $found, 25);
                            }
                            break;
                    }
                }
            } else {
                $value = call_user_func(Zend_Locale_Math::$div, $value, $this->_units[$type][0], 25);
            }

            $slength = strlen($value);
            $length  = 0;
            for($i = 1; $i <= $slength; ++$i) {
                if ($value[$slength - $i] != '0') {
                    $length = 26 - $i;
                    break;
                }
            }

            $this->_value = Zend_Locale_Math::round($value, $length);
            $this->_type  = $type;
        }
        return $this;
    }

    /**
     * Compare if the value and type is equal
     *
     * @param  Zend_Measure_Abstract $object object to compare
     * @return boolean
     */
    public function equals($object)
    {
        if ((string) $object == $this->toString()) {
            return true;
        }

        return false;
    }

    /**
     * Returns a string representation
     *
     * @param  integer            $round  (Optional) Runds the value to an given exception
     * @param  string|Zend_Locale $locale (Optional) Locale to set for the number
     * @return string
     */
    public function toString($round = -1, $locale = null)
    {
        if ($locale === null) {
            $locale = $this->_locale;
        }

        return $this->getValue($round, $locale) . ' ' . $this->_units[$this->getType()][1];
    }

    /**
     * Returns a string representation
     *
     * @return string
     */
    public function __toString()
    {
        return $this->toString();
    }

    /**
     * Returns the conversion list
     *
     * @return array
     */
    public function getConversionList()
    {
        return $this->_units;
    }

    /**
     * Alias function for setType returning the converted unit
     *
     * @param  string             $type   Constant Type
     * @param  integer            $round  (Optional) Rounds the value to a given precision
     * @param  string|Zend_Locale $locale (Optional) Locale to set for the number
     * @return string
     */
    public function convertTo($type, $round = 2, $locale = null)
    {
        $this->setType($type);
        return $this->toString($round, $locale);
    }

    /**
     * Adds an unit to another one
     *
     * @param  Zend_Measure_Abstract $object object of same unit type
     * @return Zend_Measure_Abstract
     */
    public function add($object)
    {
        $object->setType($this->getType());
        $value  = $this->getValue(-1) + $object->getValue(-1);

        $this->setValue($value, $this->getType(), $this->_locale);
        return $this;
    }

    /**
     * Substracts an unit from another one
     *
     * @param  Zend_Measure_Abstract $object object of same unit type
     * @return Zend_Measure_Abstract
     */
    public function sub($object)
    {
        $object->setType($this->getType());
        $value  = $this->getValue(-1) - $object->getValue(-1);

        $this->setValue($value, $this->getType(), $this->_locale);
        return $this;
    }

    /**
     * Compares two units
     *
     * @param  Zend_Measure_Abstract $object object of same unit type
     * @return boolean
     */
    public function compare($object)
    {
        $object->setType($this->getType());
        $value  = $this->getValue(-1) - $object->getValue(-1);

        if ($value < 0) {
            return -1;
        } else if ($value > 0) {
            return 1;
        }

        return 0;
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          